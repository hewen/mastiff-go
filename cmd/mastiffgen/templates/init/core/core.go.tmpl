// Package core provides the main application logic and initialization for the Mastiff application.
package core

import (
	"context"
	"fmt"

	"{{.PackageName}}/config"
	"{{.PackageName}}/pkg/model"
    // MODULE_PACKAGE_START
    // MODULE_PACKAGE_END

	"github.com/gin-gonic/gin"
	"github.com/hewen/mastiff-go/logger"
	"github.com/hewen/mastiff-go/server"
	"github.com/hewen/mastiff-go/server/test"
	"google.golang.org/grpc"
	healthpb "google.golang.org/grpc/health/grpc_health_v1"
)

// Core represents the main application core, managing configuration and servers.
type Core struct {
	conf    *config.Config
	servers server.Servers

	// MODULE_FIELDS_START
	// MODULE_FIELDS_END
}

// NewCore initializes a new Core instance with the provided configuration.
func NewCore(conf *config.Config) (*Core, error) {
	if conf == nil {
		return nil, fmt.Errorf("empty config")
	}

	c := new(Core)
	c.conf = conf

	if err := model.InitConnector(conf); err != nil {
		return nil, err
	}

	if err := logger.InitLogger(conf.Logger); err != nil {
		return nil, err
	}

	if conf.HTTP != nil {
		httpServer, err := server.NewHTTPServer(conf.HTTP, c.initGinRoute)
		if err != nil {
			return nil, err
		}

		c.servers.Add(httpServer)
	}

	if conf.Grpc != nil {
		grpcServer, err := server.NewGrpcServer(conf.Grpc, func(s *grpc.Server) {
			healthpb.RegisterHealthServer(s, c)
			// TODO add your gRPC service: rpc.RegisterYourServer(s, c)
		})
		if err != nil {
			return nil, err
		}
		c.servers.Add(grpcServer)
	}

	if conf.Queue != nil {
		// TODO add handleFn and newMsgFn
		handleFn := func(_ context.Context, _ *test.TestMsg) error {
			return nil
		}
		newMsgFn := func() *test.TestMsg {
			return &test.TestMsg{}
		}
		handler := server.NewQueueProtoRedisHandler(model.RStore.GetDb(), conf.Queue.QueueName, handleFn, newMsgFn)
		queueServer, err := server.NewQueueServer(*conf.Queue, handler)
		if err != nil {
			return nil, err
		}
		c.servers.Add(queueServer)
	}

	// MODULE_INITS_START
	// MODULE_INITS_END

	return c, nil
}

// initGinRoute initializes the Gin routes for the application.
func (c *Core) initGinRoute(r *gin.Engine) {
	api := r.Group("/api/v1")
	// TODO remove test route, add your routes
	api.POST("/test", func(_ *gin.Context) {})

	// MODULE_ROUTES_START
	// MODULE_ROUTES_END
}

// Start starts all servers managed by the Core instance.
func (c *Core) Start() {
	c.servers.Start()
}

// Stop stops all servers managed by the Core instance.
func (c *Core) Stop() {
	c.servers.Stop()
}
