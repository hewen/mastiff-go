// Package core provides the main application logic and initialization for the Mastiff application.
package core

import (
	"testing"

	"{{.PackageName}}/config"
	"{{.PackageName}}/pkg/model"

	"github.com/alicebob/miniredis/v2"
	"github.com/gin-gonic/gin"
	"github.com/hewen/mastiff-go/logger"
	"github.com/hewen/mastiff-go/server"
	"github.com/hewen/mastiff-go/store"
	"github.com/stretchr/testify/assert"
)

func TestCoreEmptyConfig(t *testing.T) {
	_, err := NewCore(nil)
	assert.NotNil(t, err)
}

func TestCore_InitConnectorError(t *testing.T) {
	_, err := NewCore(&config.Config{
		Mysql: &store.MysqlConf{
			DataSourceName: "error",
        },
	})
	assert.EqualValues(t, "invalid DSN: missing the slash separating the database name", err.Error())
}

func TestCore_Http(t *testing.T) {
	c, err := NewCore(&config.Config{
		HTTP: &server.HTTPConf{
			Addr: "error",
		},
	})

	assert.Nil(t, err)
	assert.NotNil(t, c)
	go c.Start()
}

func TestCore_Grpc(t *testing.T) {
	c, err := NewCore(&config.Config{
		HTTP: &server.HTTPConf{
			Addr: "0.0.0.0:8080",
		},
	})

	assert.Nil(t, err)
	assert.NotNil(t, c)
	go c.Start()
}

func TestCore_Queue(t *testing.T) {
	s, _ := miniredis.Run()
	c, err := NewCore(&config.Config{
		Queue: &server.QueueConf{
			QueueName: "test",
		},
		Redis: &store.RedisConf{
			Addr:     s.Addr(),
			Password: "",
			DB:       0,
		},
	})

	assert.Nil(t, err)
	assert.NotNil(t, c)
	go c.Start()
}

func TestNewCore(t *testing.T) {
	initMockMysql()

	s, _ := miniredis.Run()
	c, err := NewCore(&config.Config{
		Grpc: &server.GrpcConf{
			Addr: "0.0.0.0:9090",
		},
		HTTP: &server.HTTPConf{
			Addr: "0.0.0.0:8080",
		},
		Mysql: &store.MysqlConf{
			DataSourceName: model.DStore.DataSourceName(),
		},
		Redis: &store.RedisConf{
			Addr:     s.Addr(),
			Password: "",
			DB:       0,
		},
		Logger: logger.Config{
			Level: "INFO",
		},
	})
	assert.Nil(t, err)
	assert.NotNil(t, c)
}

func TestCore_StartAndStop(_ *testing.T) {
	c := new(Core)
	c.Start()
	c.Stop()
}

func TestInitGinRoute(_ *testing.T) {
	c := new(Core)
	c.initGinRoute(gin.New())
}
