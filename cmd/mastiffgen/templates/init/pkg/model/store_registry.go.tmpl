// Package model provides the database and Redis connection management for the application.
package model

import (
	"{{.PackageName}}/config"

	"github.com/go-redis/redis/v7"
	"github.com/hewen/mastiff-go/logger"
	"github.com/hewen/mastiff-go/server"
	"github.com/hewen/mastiff-go/store"
)

var (
	// DbConn and RedisConn are global variables for the database and Redis connections.
	dbConn *store.DB

	// RedisConn is a global variable for the Redis connection.
	redisConn *redis.Client

	// DStore is a global variable for the database store.
	DStore *DBStore
	// RStore is a global variable for the Redis store.
	RStore *RedisStore
)

// init registers a graceful shutdown function to close the database and Redis connections.
func init() {
	server.AddGracefulStop(func() {
		if dbConn != nil {
			if err := dbConn.Close(); err != nil {
				logger.NewLogger().Errorf("%v", err)
			}
		}

		if redisConn != nil {
			if err := redisConn.Close(); err != nil {
				logger.NewLogger().Errorf("%v", err)
			}
		}
	})
}

// InitConnector initializes the database and Redis connections based on the provided configuration.
func InitConnector(c *config.Config) (err error) {
	if c.Redis != nil {
		redisConn, err = store.InitRedis(*c.Redis)
		if err != nil {
			return err
		}
		RStore = NewRedisStore(redisConn)
	}

	if c.Mysql != nil {
		dbConn, err = store.InitMysql(*c.Mysql)
		if err != nil {
			return err
		}
		DStore = NewDbStore(dbConn)
	}

	return nil
}
