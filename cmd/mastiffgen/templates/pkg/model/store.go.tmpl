// Package model provides the database and Redis store implementations.
package model

import (
	"{{.ModuleName}}/pkg/model/custom"
	"{{.ModuleName}}/pkg/model/sqlc"
	"github.com/go-redis/redis/v7"
	"github.com/hewen/mastiff-go/store"
)

// DBStore is a struct that holds a database connection and queries.
type DBStore struct {
	db            *store.DB
	Queries       *sqlc.Queries
	CustomQueries *custom.Queries
}

// Ping checks the database connection by pinging it.
func (d *DBStore) Ping() error {
	return d.db.Ping()
}

// DataSourceName returns the data source name of the database.
func (d *DBStore) DataSourceName() string {
	return d.db.DataSourceName
}

// Close closes the database connection.
func (d *DBStore) Close() error {
	return d.db.Close()
}

// NewDbStore creates a new instance of DBStore with the provided database connection.
func NewDbStore(db *store.DB) *DBStore {
	return &DBStore{
		db:            db,
		Queries:       sqlc.New(db),
		CustomQueries: custom.New(db),
	}
}

// RedisStore is a struct that holds a Redis client.
type RedisStore struct {
	db *redis.Client
}

// Ping checks the Redis connection by pinging it.
func (r *RedisStore) Ping() error {
	_, err := r.db.Ping().Result()
	return err
}

// Close closes the Redis connection.
func (r *RedisStore) Close() error {
	return r.db.Close()
}

// GetDb return redis client.
func (r *RedisStore) GetDb() *redis.Client {
	return r.db
}

// NewRedisStore creates a new instance of RedisStore with the provided Redis client.
func NewRedisStore(db *redis.Client) *RedisStore {
	return &RedisStore{db: db}
}
