package core

import (
	"context"
	"testing"

	"{{.ModuleName}}/pkg/model"
	"github.com/stretchr/testify/assert"
	healthpb "google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/metadata"
)

func TestCheck(t *testing.T) {
	c := new(Core)
	ctx := context.TODO()
	model.RedisConn.Close()
	res, err := c.Check(ctx, &healthpb.HealthCheckRequest{})
	assert.NotNil(t, err)
	assert.Equal(t, healthpb.HealthCheckResponse_NOT_SERVING, res.Status)

	initMockRedis()
	res, err = c.Check(ctx, &healthpb.HealthCheckRequest{})
	assert.Nil(t, err)
	assert.Equal(t, healthpb.HealthCheckResponse_SERVING, res.Status)
}

func TestWatch(t *testing.T) {
	c := new(Core)
	var ws testWatchServer
	err := c.Watch(&healthpb.HealthCheckRequest{}, &ws)
	assert.NotNil(t, err)
}

type testWatchServer struct {
}

func (*testWatchServer) Send(*healthpb.HealthCheckResponse) error { return nil }

func (*testWatchServer) SetHeader(metadata.MD) error  { return nil }
func (*testWatchServer) SendHeader(metadata.MD) error { return nil }
func (*testWatchServer) SetTrailer(metadata.MD)       {}
func (*testWatchServer) Context() context.Context     { return nil }
func (*testWatchServer) SendMsg(interface{}) error    { return nil }
func (*testWatchServer) RecvMsg(interface{}) error    { return nil }
