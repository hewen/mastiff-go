.DEFAULT_GOAL := test

PKGS := $(shell go list ./...)
COVERFILES := $(wildcard *.coverprofile)
COVER_OUT := coverage.out
COVER_PKG := ./...
MAKEFLAGS += --no-print-directory

test:
	@echo "==> Running Tests"
	@go list -f '\{\{if gt (len .TestGoFiles) 0\}\}"go test -tags test -covermode=count -coverprofile \{\{.Name\}\}.coverprofile -coverpkg=$(COVER_PKG) \{\{.ImportPath\}\}"\{\{end\}\}' ./... \
	| xargs -I {} sh -c {}
	@$(MAKE) merge-cover
	@$(MAKE) check-cover

cover:
	@echo "==> Generating Coverage Report (HTML)"
	@$(MAKE) test
	@go tool cover -html=$(COVER_OUT)

lint:
	@echo "==> Running Linter"
	@golangci-lint run -v -E gocritic -E misspell -E revive -E godot --timeout 5m ./...

race:
	@echo "==> Running Race Detector Tests"
	@go test -v -race -tags=gc_opt -covermode=atomic -timeout 15m -failfast ./...

merge-cover:
	@gocovmerge $(COVERFILES) | grep -v ".pb.go" > $(COVER_OUT)
	@go tool cover -func=$(COVER_OUT) | grep total

check-cover:
	@go tool cover -func=$(COVER_OUT) | grep -v '100.0%' | \
	awk '{if ($$3 < 80) {print $$1, $$2" coverage ("$$3") < 80%"; failed=1\}\} END {exit failed}'

clean:
	@echo "==> Cleaning Generated Files"
	@rm -f *.coverprofile
	@rm -f coverage.*
	@rm -f *.test *.out

.PHONY: test cover lint race clean merge-cover check-cover gen
