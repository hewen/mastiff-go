// Package core provides the main application logic and initialization for the Mastiff application.
package core

import (
	"net/http"
	"testing"

	"{{.PackageName}}/pkg/model"

	"github.com/alicebob/miniredis/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/hewen/mastiff-go/config"
	"github.com/hewen/mastiff-go/config/loggerconf"
	"github.com/hewen/mastiff-go/config/serverconf"
	"github.com/hewen/mastiff-go/config/storeconf"
	"github.com/stretchr/testify/assert"
)

func TestCoreEmptyConfig(t *testing.T) {
	_, err := NewCore(nil)
	assert.NotNil(t, err)
}

func TestCoreEmptyLoggerConfig(t *testing.T) {
	_, err := NewCore(&config.Config{})
	assert.EqualValues(t, "empty logger config", err.Error())
}

func TestCore_InitConnectorError(t *testing.T) {
	_, err := NewCore(&config.Config{
		Logger: &loggerconf.Config{
			Level: "info",
		},
		Mysql: &storeconf.MysqlConfig{
			DataSourceName: "error",
		},
	})
	assert.EqualValues(t, "invalid DSN: missing the slash separating the database name", err.Error())
}

func TestCore_Http(t *testing.T) {
	c, err := NewCore(&config.Config{
		Logger: &loggerconf.Config{
			Level: "info",
		},
		HTTP: &serverconf.HTTPConfig{
			Addr: "error",
		},
	})

	assert.Nil(t, err)
	assert.NotNil(t, c)
	go c.Start()
}

func TestCore_Grpc(t *testing.T) {
	c, err := NewCore(&config.Config{
		Logger: &loggerconf.Config{
			Level: "info",
		},
		HTTP: &serverconf.HTTPConfig{
			Addr: "0.0.0.0:8080",
		},
	})

	assert.Nil(t, err)
	assert.NotNil(t, c)
	go c.Start()
}

func TestCore_Queue(t *testing.T) {
	s, _ := miniredis.Run()
	c, err := NewCore(&config.Config{
		Logger: &loggerconf.Config{
			Level: "info",
		},
		Queue: &serverconf.QueueConfig{
			QueueName: "test",
		},
		Redis: &storeconf.RedisConfig{
			Addr:     s.Addr(),
			Password: "",
			DB:       0,
		},
	})

	assert.Nil(t, err)
	assert.NotNil(t, c)
	go c.Start()
}

func TestNewCore(t *testing.T) {
	initMockMysql()

	s, _ := miniredis.Run()
	c, err := NewCore(&config.Config{
		RPC: &serverconf.RPCConfig{
			Addr: "0.0.0.0:9090",
		},
		HTTP: &serverconf.HTTPConfig{
			Addr: "0.0.0.0:8080",
		},
		Mysql: &storeconf.MysqlConfig{
			DataSourceName: model.DStore.DataSourceName(),
		},
		Redis: &storeconf.RedisConfig{
			Addr:     s.Addr(),
			Password: "",
			DB:       0,
		},
		Logger: &loggerconf.Config{
			Level: "info",
		},
	})
	assert.Nil(t, err)
	assert.NotNil(t, c)
}

func TestCore_StartAndStop(_ *testing.T) {
	c := new(Core)
	c.Start()
	c.Stop()
}

func TestInitGinRoute(t *testing.T) {
	c := new(Core)
	app := fiber.New()
	c.initFiberRoute(app)
	req, _ := http.NewRequest("GET", "/api/v1/test", nil)
	resp, err := app.Test(req)
	defer func() {
		_ = resp.Body.Close()
	}()
	assert.Nil(t, err)
	assert.Equal(t, http.StatusOK, resp.StatusCode)

}
