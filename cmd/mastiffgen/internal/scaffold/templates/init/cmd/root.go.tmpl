// Package cmd represents the root command of the application.
package cmd

import (
	"fmt"
	"os"

	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// cfgFile is the configuration file used by the application.
var cfgFile string

// exitFunc is the function used to exit the application.
var exitFunc = os.Exit

// RootCmd is the root command of the application.
var RootCmd = &cobra.Command{
	Use:   "{{.ProjectName}}",
	Short: "{{.ProjectName}}",
	Long:  `{{.ProjectName}}`,
}

// Execute adds all child commands to the root command and sets flags appropriately.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err) // nolint
		exitFunc(1)
	}
}

// init initializes the configuration by reading the config file and environment variables.
func init() {
	cobra.OnInitialize(initConfig)
	RootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.{{.ProjectName}}.yaml)")
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" {
		// Use config file from the flag.
		viper.SetConfigFile(cfgFile)
	} else {
		// Find home directory.
		home, err := homedir.Dir()
		if err != nil {
			fmt.Println(err) // nolint
			os.Exit(1)
		}

		// Search config in home directory with name ".{{.ProjectName}}" (without extension).
		viper.AddConfigPath(home)
		viper.SetConfigName(".{{.ProjectName}}")
	}

	viper.AutomaticEnv() // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil {
		fmt.Println("Using config file:", viper.ConfigFileUsed()) // nolint
	}
}
